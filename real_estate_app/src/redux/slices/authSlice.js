import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios'; // Use axios for making HTTP requests

const BASE_URL = 'https://real-estate-app-d5038-default-rtdb.asia-southeast1.firebasedatabase.app/users.json';
// function generateRandomId() {
//   const randomNumber = Math.floor(Math.random() * Math.pow(10, 8));
//   return randomNumber;
// }

// Async thunk for user registration
export const registerUser = createAsyncThunk('auth/registerUser', async ({ email, phone, location, name, role, password }, { rejectWithValue }) => {
  try {
    const response = await axios.post(BASE_URL, {
      email,
      password,
      name,
      phone,
      location,
      createdAt: new Date().toISOString(),
      searchHistory: [],
      favoriteProperties: [],
      reviews: [],
      updatedAt: "", 
      preferences: [],
      role,

    });


    // The response data will include the unique key generated by Firebase
    return { id: response.data.name, email, phone, location }; // Include the id in the returned data
  } catch (error) {
    console.log(error)
    return rejectWithValue(error.response.data.error || error.message);
  }
});
export const addPropertyToUser = createAsyncThunk('auth/addPropertyToUser', async ( propertyData , { rejectWithValue }) => {
  try {
    const response = await axios.patch(BASE_URL, {
     properties: propertyData

    });


    // The response data will include the unique key generated by Firebase
    return { id: response.data.name, email, phone, location }; // Include the id in the returned data
  } catch (error) {
    console.log(error)
    return rejectWithValue(error.response.data.error || error.message);
  }
});

export const loginUser = createAsyncThunk('auth/loginUser', async ({ email, password }, { rejectWithValue }) => {
  try {
    const response = await axios.get(BASE_URL); // Fetch users from the Firebase database
    const users = response.data ? Object.keys(response.data).map(key => ({ id: key, ...response.data[key] })) : [];

    const user = users.find(user => user.email === email && user.password === password);
    
    if (!user) {
      throw new Error('Invalid credentials'); // If no user matches the email and password
    }

    return user; // Return the logged-in user data
  } catch (error) {
    return rejectWithValue(error.message || "Failed to login");
  }
});

// Async thunk for fetching users
export const fetchUsers = createAsyncThunk('auth/fetchUsers', async (_, { rejectWithValue }) => {
  try {
    const response = await axios.get(BASE_URL);
    return response.data; // Return the fetched users
  } catch (error) {
    return rejectWithValue(error.response.data.error || error.message);
  }
});

// Create the auth slice
const authSlice = createSlice({
  name: 'auth',
  initialState: {
    isAuthenticated: false, 
    user: null,
    users: [],
    loading: false,
    error: null,
  },
  reducers: {
    clearError: (state) => {
      state.error = null; // Action to clear errors
    },
    logout: (state) => {
      state.isAuthenticated = false;
      state.user = null
    }
  },
  extraReducers: (builder) => {
    builder
      .addCase(registerUser.pending, (state) => {
        state.loading = true;
      })
      .addCase(registerUser.fulfilled, (state, action) => {
        state.loading = false;
        state.users.push(action.payload); // Add the new user to the state
      })
      .addCase(registerUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload; // Set error message
      })
      .addCase(fetchUsers.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchUsers.fulfilled, (state, action) => {
        state.loading = false;
        state.users = action.payload ? Object.keys(action.payload).map(key => ({ id: key, ...action.payload[key] })) : []; // Transform response data
      })
      .addCase(fetchUsers.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload; // Set error message
      })
      .addCase(loginUser.pending, (state) => {
        state.loading = true;
      })
      .addCase(loginUser.fulfilled, (state, action) => {
        state.loading = false;
        state.users.push(action.payload) // Add the logged-in user to the state
        state.isAuthenticated = true
        state.user = action.payload
      })
      .addCase(loginUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload; // Set error message
        state.isAuthenticated = false
        state.user = null
      })
      .addCase(addPropertyToUser.pending, (state) =>{
          state.loading = true;
      })
      .addCase(addPropertyToUser.fulfilled, (state, action) =>{
          state.loading = false;
          state.user.properties = action.payload
      })
      .addCase(addPropertyToUser.rejected, (state, action) =>{
          state.loading = false;
          state.error = action.payload;
      })
      
  },
});

export const { clearError, logout } = authSlice.actions;

export default authSlice.reducer;
